diff -Naur linux-2.6.25.18/arch/x86/kernel/apic_32.c linux-2.6.25.18_Seeker/arch/x86/kernel/apic_32.c
--- linux-2.6.25.18/arch/x86/kernel/apic_32.c	2008-10-08 19:58:32.000000000 -0700
+++ linux-2.6.25.18_Seeker/arch/x86/kernel/apic_32.c	2008-10-11 16:17:35.000000000 -0700
@@ -615,6 +615,31 @@
 	set_irq_regs(old_regs);
 }
 
+/* PMU Interrupt handler written looking at Perfmon and the Timer
+ * Interrupt above. This essentially does nothing other than
+ * ack'ing the interrupt. Its main use is from the seeker module
+ * which uses jprobe to execute the remaining of the handler. 
+ */
+void smp_apic_pmu_interrupt(struct pt_regs *regs)
+{
+	struct pt_regs *old_regs = set_irq_regs(regs);
+
+	/*
+	 * NOTE! We'd better ACK the irq immediately,
+	 * because timer handling can be slow.
+	 */
+	ack_APIC_irq();
+	/*
+	 * update_process_times() expects us to have done irq_enter().
+	 * Besides, if we don't timer interrupts ignore the global
+	 * interrupt lock, which is the WrongThing (tm) to do.
+	 */
+	irq_enter();
+	apic_write(APIC_LVTPC, LOCAL_PMU_VECTOR);
+	irq_exit();
+	set_irq_regs(old_regs);
+}
+
 int setup_profiling_timer(unsigned int multiplier)
 {
 	return -EINVAL;
@@ -1298,6 +1323,7 @@
 #endif
 	/* self generated IPI for local APIC timer */
 	set_intr_gate(LOCAL_TIMER_VECTOR, apic_timer_interrupt);
+	set_intr_gate(LOCAL_PMU_VECTOR, apic_pmu_interrupt);
 
 	/* IPI vectors for APIC spurious and error interrupts */
 	set_intr_gate(SPURIOUS_APIC_VECTOR, spurious_interrupt);
diff -Naur linux-2.6.25.18/arch/x86/kernel/apic_64.c linux-2.6.25.18_Seeker/arch/x86/kernel/apic_64.c
--- linux-2.6.25.18/arch/x86/kernel/apic_64.c	2008-10-08 19:58:32.000000000 -0700
+++ linux-2.6.25.18_Seeker/arch/x86/kernel/apic_64.c	2008-10-11 16:21:31.000000000 -0700
@@ -505,6 +505,31 @@
 	set_irq_regs(old_regs);
 }
 
+/* The PMU Interrupt handler. Currently does nothing other than 
+ * ack'ing the interrupt. Its main use is from seeker which 
+ * probes this using jprobes.
+ */
+void smp_apic_pmu_interrupt(struct pt_regs *regs)
+{
+	struct pt_regs *old_regs = set_irq_regs(regs);
+
+	/*
+	 * NOTE! We'd better ACK the irq immediately,
+	 * because timer handling can be slow.
+	 */
+	ack_APIC_irq();
+	/*
+	 * update_process_times() expects us to have done irq_enter().
+	 * Besides, if we don't timer interrupts ignore the global
+	 * interrupt lock, which is the WrongThing (tm) to do.
+	 */
+	exit_idle();
+	irq_enter();
+	apic_write(APIC_LVTPC, LOCAL_PMU_VECTOR);
+	irq_exit();
+	set_irq_regs(old_regs);
+}
+	
 int setup_profiling_timer(unsigned int multiplier)
 {
 	return -EINVAL;
diff -Naur linux-2.6.25.18/arch/x86/kernel/entry_64.S linux-2.6.25.18_Seeker/arch/x86/kernel/entry_64.S
--- linux-2.6.25.18/arch/x86/kernel/entry_64.S	2008-10-08 19:58:32.000000000 -0700
+++ linux-2.6.25.18_Seeker/arch/x86/kernel/entry_64.S	2008-10-11 16:13:17.000000000 -0700
@@ -722,6 +722,10 @@
 	apicinterrupt LOCAL_TIMER_VECTOR,smp_apic_timer_interrupt
 END(apic_timer_interrupt)
 
+ENTRY(apic_pmu_interrupt)
+        apicinterrupt LOCAL_PMU_VECTOR,smp_apic_pmu_interrupt
+END(apic_pmu_interrupt)
+
 ENTRY(error_interrupt)
 	apicinterrupt ERROR_APIC_VECTOR,smp_error_interrupt
 END(error_interrupt)
diff -Naur linux-2.6.25.18/arch/x86/kernel/i8259_64.c linux-2.6.25.18_Seeker/arch/x86/kernel/i8259_64.c
--- linux-2.6.25.18/arch/x86/kernel/i8259_64.c	2008-10-08 19:58:32.000000000 -0700
+++ linux-2.6.25.18_Seeker/arch/x86/kernel/i8259_64.c	2008-10-11 16:13:17.000000000 -0700
@@ -502,6 +502,7 @@
 
 	/* self generated IPI for local APIC timer */
 	set_intr_gate(LOCAL_TIMER_VECTOR, apic_timer_interrupt);
+	set_intr_gate(LOCAL_PMU_VECTOR, apic_pmu_interrupt);
 
 	/* IPI vectors for APIC spurious and error interrupts */
 	set_intr_gate(SPURIOUS_APIC_VECTOR, spurious_interrupt);
diff -Naur linux-2.6.25.18/include/asm-x86/hw_irq_32.h linux-2.6.25.18_Seeker/include/asm-x86/hw_irq_32.h
--- linux-2.6.25.18/include/asm-x86/hw_irq_32.h	2008-10-08 19:58:32.000000000 -0700
+++ linux-2.6.25.18_Seeker/include/asm-x86/hw_irq_32.h	2008-10-11 16:14:50.000000000 -0700
@@ -36,6 +36,7 @@
 
 #ifdef CONFIG_X86_LOCAL_APIC
 void apic_timer_interrupt(void);
+void apic_pmu_interrupt(void);
 void error_interrupt(void);
 void spurious_interrupt(void);
 void thermal_interrupt(void);
diff -Naur linux-2.6.25.18/include/asm-x86/hw_irq_64.h linux-2.6.25.18_Seeker/include/asm-x86/hw_irq_64.h
--- linux-2.6.25.18/include/asm-x86/hw_irq_64.h	2008-10-08 19:58:32.000000000 -0700
+++ linux-2.6.25.18_Seeker/include/asm-x86/hw_irq_64.h	2008-10-11 16:13:17.000000000 -0700
@@ -84,20 +84,22 @@
  * sources per level' errata.
  */
 #define LOCAL_TIMER_VECTOR	0xef
+#define LOCAL_PMU_VECTOR	0xee
 
 /*
- * First APIC vector available to drivers: (vectors 0x30-0xee)
+ * First APIC vector available to drivers: (vectors 0x30-0xed)
  * we start at 0x41 to spread out vectors evenly between priority
  * levels. (0x80 is the syscall vector)
  */
 #define FIRST_DEVICE_VECTOR	(IRQ15_VECTOR + 2)
-#define FIRST_SYSTEM_VECTOR	0xef   /* duplicated in irq.h */
+#define FIRST_SYSTEM_VECTOR	0xee   /* duplicated in irq.h */
 
 
 #ifndef __ASSEMBLY__
 
 /* Interrupt handlers registered during init_IRQ */
 void apic_timer_interrupt(void);
+void apic_pmu_interrupt(void);
 void spurious_interrupt(void);
 void error_interrupt(void);
 void reschedule_interrupt(void);
diff -Naur linux-2.6.25.18/include/asm-x86/irq_64.h linux-2.6.25.18_Seeker/include/asm-x86/irq_64.h
--- linux-2.6.25.18/include/asm-x86/irq_64.h	2008-10-08 19:58:32.000000000 -0700
+++ linux-2.6.25.18_Seeker/include/asm-x86/irq_64.h	2008-10-11 16:13:17.000000000 -0700
@@ -29,7 +29,7 @@
  */
 #define NR_VECTORS 256
 
-#define FIRST_SYSTEM_VECTOR	0xef   /* duplicated in hw_irq.h */
+#define FIRST_SYSTEM_VECTOR	0xee   /* duplicated in hw_irq.h */
 
 #define NR_IRQS (NR_VECTORS + (32 *NR_CPUS))
 #define NR_IRQ_VECTORS NR_IRQS
diff -Naur linux-2.6.25.18/include/asm-x86/mach-default/entry_arch.h linux-2.6.25.18_Seeker/include/asm-x86/mach-default/entry_arch.h
--- linux-2.6.25.18/include/asm-x86/mach-default/entry_arch.h	2008-10-08 19:58:32.000000000 -0700
+++ linux-2.6.25.18_Seeker/include/asm-x86/mach-default/entry_arch.h	2008-10-11 16:13:17.000000000 -0700
@@ -30,5 +30,6 @@
 #ifdef CONFIG_X86_MCE_P4THERMAL
 BUILD_INTERRUPT(thermal_interrupt,THERMAL_APIC_VECTOR)
 #endif
+BUILD_INTERRUPT(apic_pmu_interrupt,LOCAL_PMU_VECTOR)
 
 #endif
diff -Naur linux-2.6.25.18/include/asm-x86/mach-default/irq_vectors.h linux-2.6.25.18_Seeker/include/asm-x86/mach-default/irq_vectors.h
--- linux-2.6.25.18/include/asm-x86/mach-default/irq_vectors.h	2008-10-08 19:58:32.000000000 -0700
+++ linux-2.6.25.18_Seeker/include/asm-x86/mach-default/irq_vectors.h	2008-10-11 16:13:17.000000000 -0700
@@ -56,14 +56,15 @@
  * sources per level' errata.
  */
 #define LOCAL_TIMER_VECTOR	0xef
+#define LOCAL_PMU_VECTOR	0xee
 
 /*
- * First APIC vector available to drivers: (vectors 0x30-0xee)
+ * First APIC vector available to drivers: (vectors 0x30-0xed)
  * we start at 0x31 to spread out vectors evenly between priority
  * levels. (0x80 is the syscall vector)
  */
 #define FIRST_DEVICE_VECTOR	0x31
-#define FIRST_SYSTEM_VECTOR	0xef
+#define FIRST_SYSTEM_VECTOR	0xee
 
 #define TIMER_IRQ 0
 
diff -Naur linux-2.6.25.18/kernel/kallsyms.c linux-2.6.25.18_Seeker/kernel/kallsyms.c
--- linux-2.6.25.18/kernel/kallsyms.c	2008-10-08 19:58:32.000000000 -0700
+++ linux-2.6.25.18_Seeker/kernel/kallsyms.c	2008-10-11 16:13:17.000000000 -0700
@@ -160,6 +160,7 @@
 	}
 	return module_kallsyms_lookup_name(name);
 }
+EXPORT_SYMBOL_GPL(kallsyms_lookup_name);
 
 static unsigned long get_symbol_pos(unsigned long addr,
 				    unsigned long *symbolsize,


