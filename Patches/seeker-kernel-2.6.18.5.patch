diff -uNr linux-2.6.18.5/arch/i386/kernel/apic.c linux-2.6.18.5_WORKING/arch/i386/kernel/apic.c
--- linux-2.6.18.5/arch/i386/kernel/apic.c	2006-12-02 00:13:05.000000000 +0000
+++ linux-2.6.18.5_WORKING/arch/i386/kernel/apic.c	2008-04-22 04:22:28.000000000 +0000
@@ -101,6 +101,7 @@
 #endif
 	/* self generated IPI for local APIC timer */
 	set_intr_gate(LOCAL_TIMER_VECTOR, apic_timer_interrupt);
+	set_intr_gate(LOCAL_PMU_VECTOR,apic_pmu_interrupt);
 
 	/* IPI vectors for APIC spurious and error interrupts */
 	set_intr_gate(SPURIOUS_APIC_VECTOR, spurious_interrupt);
@@ -1267,6 +1268,28 @@
 	}
 }
 
+/* PMU Interrupt handler written looking at Perfmon and the Timer
+ * Interrupt above. This essentially does nothing other than
+ * ack'ing the interrupt. Its main use is from the seeker module
+ * which uses jprobe to execute the remaining of the handler. 
+ */
+void fastcall smp_apic_pmu_interrupt(struct pt_regs *regs)
+{
+	/*
+	 * NOTE! We'd better ACK the irq immediately,
+	 * because timer handling can be slow.
+	 */
+	ack_APIC_irq();
+	/*
+	 * update_process_times() expects us to have done irq_enter().
+	 * Besides, if we don't timer interrupts ignore the global
+	 * interrupt lock, which is the WrongThing (tm) to do.
+	 */
+	irq_enter();
+	apic_write(APIC_LVTPC, LOCAL_PMU_VECTOR);
+	irq_exit();
+}
+
 int setup_profiling_timer(unsigned int multiplier)
 {
 	return -EINVAL;
diff -uNr linux-2.6.18.5/arch/x86_64/kernel/apic.c linux-2.6.18.5_WORKING/arch/x86_64/kernel/apic.c
--- linux-2.6.18.5/arch/x86_64/kernel/apic.c	2006-12-02 00:13:05.000000000 +0000
+++ linux-2.6.18.5_WORKING/arch/x86_64/kernel/apic.c	2008-04-22 04:22:27.000000000 +0000
@@ -990,6 +990,28 @@
 	irq_exit();
 }
 
+/* The PMU Interrupt handler. Currently does nothing other than 
+ * ack'ing the interrupt. Its main use is from seeker which 
+ * probes this using jprobes.
+ */
+void smp_apic_pmu_interrupt(struct pt_regs *regs)
+{
+	/*
+	 * NOTE! We'd better ACK the irq immediately,
+	 * because timer handling can be slow.
+	 */
+	ack_APIC_irq();
+	/*
+	 * update_process_times() expects us to have done irq_enter().
+	 * Besides, if we don't timer interrupts ignore the global
+	 * interrupt lock, which is the WrongThing (tm) to do.
+	 */
+	exit_idle();
+	irq_enter();
+	apic_write(APIC_LVTPC, LOCAL_PMU_VECTOR);
+	irq_exit();
+}
+	
 /*
  * apic_is_clustered_box() -- Check if we can expect good TSC
  *
diff -uNr linux-2.6.18.5/arch/x86_64/kernel/entry.S linux-2.6.18.5_WORKING/arch/x86_64/kernel/entry.S
--- linux-2.6.18.5/arch/x86_64/kernel/entry.S	2006-12-02 00:13:05.000000000 +0000
+++ linux-2.6.18.5_WORKING/arch/x86_64/kernel/entry.S	2008-04-22 04:22:27.000000000 +0000
@@ -684,6 +684,10 @@
 	apicinterrupt LOCAL_TIMER_VECTOR,smp_apic_timer_interrupt
 END(apic_timer_interrupt)
 
+ENTRY(apic_pmu_interrupt)
+        apicinterrupt LOCAL_PMU_VECTOR,smp_apic_pmu_interrupt
+END(apic_pmu_interrupt)
+
 ENTRY(error_interrupt)
 	apicinterrupt ERROR_APIC_VECTOR,smp_error_interrupt
 END(error_interrupt)
diff -uNr linux-2.6.18.5/arch/x86_64/kernel/i8259.c linux-2.6.18.5_WORKING/arch/x86_64/kernel/i8259.c
--- linux-2.6.18.5/arch/x86_64/kernel/i8259.c	2006-12-02 00:13:05.000000000 +0000
+++ linux-2.6.18.5_WORKING/arch/x86_64/kernel/i8259.c	2008-04-22 04:22:27.000000000 +0000
@@ -584,6 +584,7 @@
 #ifdef CONFIG_X86_LOCAL_APIC
 	/* self generated IPI for local APIC timer */
 	set_intr_gate(LOCAL_TIMER_VECTOR, apic_timer_interrupt);
+	set_intr_gate(LOCAL_PMU_VECTOR, apic_pmu_interrupt);
 
 	/* IPI vectors for APIC spurious and error interrupts */
 	set_intr_gate(SPURIOUS_APIC_VECTOR, spurious_interrupt);
diff -uNr linux-2.6.18.5/include/asm-i386/hw_irq.h linux-2.6.18.5_WORKING/include/asm-i386/hw_irq.h
--- linux-2.6.18.5/include/asm-i386/hw_irq.h	2006-12-02 00:13:05.000000000 +0000
+++ linux-2.6.18.5_WORKING/include/asm-i386/hw_irq.h	2008-04-22 04:18:58.000000000 +0000
@@ -42,6 +42,7 @@
 
 #ifdef CONFIG_X86_LOCAL_APIC
 fastcall void apic_timer_interrupt(void);
+fastcall void apic_pmu_interrupt(void);
 fastcall void error_interrupt(void);
 fastcall void spurious_interrupt(void);
 fastcall void thermal_interrupt(struct pt_regs *);
diff -uNr linux-2.6.18.5/include/asm-i386/mach-default/entry_arch.h linux-2.6.18.5_WORKING/include/asm-i386/mach-default/entry_arch.h
--- linux-2.6.18.5/include/asm-i386/mach-default/entry_arch.h	2006-12-02 00:13:05.000000000 +0000
+++ linux-2.6.18.5_WORKING/include/asm-i386/mach-default/entry_arch.h	2008-04-22 04:18:58.000000000 +0000
@@ -30,5 +30,6 @@
 #ifdef CONFIG_X86_MCE_P4THERMAL
 BUILD_INTERRUPT(thermal_interrupt,THERMAL_APIC_VECTOR)
 #endif
+BUILD_INTERRUPT(apic_pmu_interrupt,LOCAL_PMU_VECTOR)
 
 #endif
diff -uNr linux-2.6.18.5/include/asm-i386/mach-default/irq_vectors.h linux-2.6.18.5_WORKING/include/asm-i386/mach-default/irq_vectors.h
--- linux-2.6.18.5/include/asm-i386/mach-default/irq_vectors.h	2006-12-02 00:13:05.000000000 +0000
+++ linux-2.6.18.5_WORKING/include/asm-i386/mach-default/irq_vectors.h	2008-04-22 04:18:58.000000000 +0000
@@ -56,14 +56,15 @@
  * sources per level' errata.
  */
 #define LOCAL_TIMER_VECTOR	0xef
+#define LOCAL_PMU_VECTOR	0xee
 
 /*
- * First APIC vector available to drivers: (vectors 0x30-0xee)
+ * First APIC vector available to drivers: (vectors 0x30-0xed)
  * we start at 0x31 to spread out vectors evenly between priority
  * levels. (0x80 is the syscall vector)
  */
 #define FIRST_DEVICE_VECTOR	0x31
-#define FIRST_SYSTEM_VECTOR	0xef
+#define FIRST_SYSTEM_VECTOR	0xee
 
 #define TIMER_IRQ 0
 
diff -uNr linux-2.6.18.5/include/asm-x86_64/hw_irq.h linux-2.6.18.5_WORKING/include/asm-x86_64/hw_irq.h
--- linux-2.6.18.5/include/asm-x86_64/hw_irq.h	2006-12-02 00:13:05.000000000 +0000
+++ linux-2.6.18.5_WORKING/include/asm-x86_64/hw_irq.h	2008-04-22 04:18:57.000000000 +0000
@@ -64,14 +64,15 @@
  * sources per level' errata.
  */
 #define LOCAL_TIMER_VECTOR	0xef
+#define LOCAL_PMU_VECTOR	0xee
 
 /*
- * First APIC vector available to drivers: (vectors 0x30-0xee)
+ * First APIC vector available to drivers: (vectors 0x30-0xed)
  * we start at 0x31 to spread out vectors evenly between priority
  * levels. (0x80 is the syscall vector)
  */
 #define FIRST_DEVICE_VECTOR	0x31
-#define FIRST_SYSTEM_VECTOR	0xef   /* duplicated in irq.h */
+#define FIRST_SYSTEM_VECTOR	0xee   /* duplicated in irq.h */
 
 
 #ifndef __ASSEMBLY__
diff -uNr linux-2.6.18.5/include/asm-x86_64/irq.h linux-2.6.18.5_WORKING/include/asm-x86_64/irq.h
--- linux-2.6.18.5/include/asm-x86_64/irq.h	2006-12-02 00:13:05.000000000 +0000
+++ linux-2.6.18.5_WORKING/include/asm-x86_64/irq.h	2008-04-22 04:18:57.000000000 +0000
@@ -29,7 +29,7 @@
  */
 #define NR_VECTORS 256
 
-#define FIRST_SYSTEM_VECTOR	0xef   /* duplicated in hw_irq.h */
+#define FIRST_SYSTEM_VECTOR	0xee   /* duplicated in hw_irq.h */
 
 #ifdef CONFIG_PCI_MSI
 #define NR_IRQS FIRST_SYSTEM_VECTOR
